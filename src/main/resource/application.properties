#src/main/resources/config下application.properties覆盖src/main/resources下application.properties中相同的属性
#如果你在相同优先级位置同时有application.properties和application.yml，那么application.properties里的属性里面的属性就会覆盖application.yml

#server.port=8080
#在现实的开发环境中，我们需要不同的配置环境；格式为application-{profile}.properties，其中{profile}对应你的环境标识
#当然你也可以用命令行启动的时候带上参数：java -jar xxx.jar --spring.profiles.active=dev
#除了spring.profiles.active来激活一个或者多个profile之外，还可以用spring.profiles.include来叠加profil
#spring.profiles.include: dev,pro
spring.profiles.active=dev
server.context-path=/springboot
  
my.name=regan
my.age=18
#配置文件中用到了${random} ，它可以用来生成各种不同类型的随机值
my.number=${random.int}
my.uuid=${random.uuid}
my.max=${random.int(10)}
my.value=${random.value}
my.greeting=hi,i'm  ${my.name}


spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8
#spring.datasource.username=root
#spring.datasource.password=root
spring.datasource.url=jdbc:mysql://10.10.24.241:3306/yuyuanyuan?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=laughzoo2016

# 如果通过jpa在数据库中建表，将jpa.hibernate,ddl-auto改为create，建完表之后，要改为update,要不然每次重启工程会删除表并新建
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# 基于xml来实现mybatis的数据访问层
mybatis.mapper-locations=classpath*:mybatis/*Mapper.xml
mybatis.type-aliases-package=com.study.pojo

# 整合redis
spring.redis.host=10.10.24.220
spring.redis.port=6379
#spring.redis.password=
spring.redis.database=1
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1
spring.redis.pool.max-idle=500
spring.redis.pool.min-idle=0
spring.redis.timeout=0

# 整合Spring Security实现访问API页面输入用户名密码
security.basic.path=/swagger-ui.html
security.basic.enabled=true
security.user.name=regan
security.user.password=123456

# 限制上传文件的大小
spring.http.multipart.max-file-size=128KB
spring.http.multipart.max-request-size=128KB